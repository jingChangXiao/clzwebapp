<template>
  <div class="scrollWrapper" ref="scrollWrapper">
    <slot></slot>
  </div>
</template>
<script>
  import BScroll from 'better-scroll'
  export default {
    name: 'scrollWrapper',
    props: {
      isClick: {
        type: [Boolean, String],
        default: true
      },
      probeType: {
        type: Number,
        default: 3
      },
      listenScroll: {
        type: Boolean,
        default: true
      },
      pullUp: {
        type: [Boolean, Object],
        default: null
      },
      pullDown: {
        type: [Boolean, Object],
        default: null
      },
      data: {
        type: [Array, Object],
        default: null
      }
    },
    mounted () {
      this.$nextTick(() => {
        setTimeout(() => {
          this.initScroll()
        }, 20)
      })
    },
    methods: {
      initScroll () {
        if (!this.$refs.scrollWrapper) {
          return
        }
        let config = this.initConfig()
        this.scroll = new BScroll(this.$refs.scrollWrapper, config)
        if (this.listenScroll) {
          this.scroll.on('scroll', (pos) => {
            this.$emit('scroll', pos)
          })
        }
        if (this.pullDown !== null) {
          this.scroll.on('pullingDown', () => {
            this.$emit('pullingDown')
          })
        }
        if (this.pullUp !== null) {
          this.scroll.on('pullingUp', () => {
            this.$emit('pullingUp')
          })
        }
      },
      /* 初始化BScroll配置参数 */
      initConfig () {
        const config = {}
        config.click = this.click
        config.probeType = this.probeType
        if (this.pullDown !== null) {
          config.pullDownRefresh = this.pullDown
        }
        if (this.pullUp !== null) {
          config.pullUpLoad = this.pullUp
        }
        return config
      },
      /* 刷新滚动列表 */
      refresh () {
        this.scroll && this.scroll.refresh()
      },
      /* 滚动到指定位置 */
      scrollTo () {
        this.scroll && this.scroll.scrollTo.apply(this.scroll, arguments)
      },
      /* 滚动到指定dom节点处 */
      scrollToElement () {
        this.scroll && this.scroll.scrollToElement.apply(this.scroll, arguments)
      },
      /* 停止刷新状态 */
      finishPullDown () {
        this.scroll.finishPullDown()
      },
      /* 停止加载状态 */
      finishPullUp () {
        this.scroll.finishPullUp()
      }
    },
    watch: {
      data (val) {
        setTimeout(() => {
          this.refresh()
        }, 100)
      }
    }
  }
</script>

<style scoped less>
  .scrollWrapper {
    width: 100%;
    overflow: hidden;
  }
</style>